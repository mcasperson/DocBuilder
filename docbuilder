#!/bin/bash

# This script runs as a continuous loop. It performs the following:
# 1. Download all content spec IDs from the server
# 2. Loop over the content spec IDS
# 3. Check to see if any topics have been edited since the last rebuild
# 4. If so, rebuild the content spec
# 5. Build up an index page of all the content specs
#
# Although it runs in an infinite loop, the script will only initiate as many concurrent rebuilds as the local PC has CPU cores.

# The location where info about last build times is stored
#DOCBUILDER_DATA_DIR=/home/mcaspers/.docbuilder
DOCBUILDER_DATA_DIR=/root/.docbuilder
# The script to call to actually build the books
#BOOK_BUILD_SCRIPT=/home/mcaspers/bin/build_original_books.sh
BOOK_BUILD_SCRIPT=/root/build_original_books.sh
# Get the number of cores
CORE_COUNT=`grep -c ^processor /proc/cpuinfo`
# The index file that is built up with each loop over the content specs
INDEX_TMP_FILE=/tmp/index.html

# Perform a check to make sure that the build script is executable
if [[ ! -x "$BOOK_BUILD_SCRIPT" ]]
then
    echo "Build script '$BOOK_BUILD_SCRIPT' is not executable or doesn't exist"
    exit 1
fi

# Start the infinite loop
while "true"
do
	# Dump the HTML header boilderplate	
	echo "<html> <head> <title>Docbuilder Index</title> <link rel=\"stylesheet\" href=\"index.css\"/> <script src=\"http://yui.yahooapis.com/3.10.0/build/yui/yui-min.js\"></script> </head> <body> <div><img height=\"87\" src=\"pg.png\" width=\"879\"></div><div style=\"margin-top:1em\"><p>DocBuilder is a service that automatically rebuilds content specifications as they are created or edited.</p><p>Each content spec has three links: a link to the compiled book itself, a link to the build log, and a link to the publican log.</p><p>If a book could not be built, first check the build log. This log contains information that may indicate syntax errors in the content specification. You can also view this log to see when the document was last built.</p><p>If the build log has no errors, check the publican log. This may indicate some syntax errors in the XML.</p><p>The topics in each document include a \"Edit this topic\" link, which will take you to the topic in the CCMS.</p><p>To view the latest changes to a document, simply refresh the page.</p></div> <div style=\"margin-top:1em\" class=\"yui3-skin-sam\" id=\"table\"> </div> <script> YUI().use('datatable', function (Y) { var data = [" > ${INDEX_TMP_FILE}

	# Loop over each content spec ID
	for CS_ID in `curl --silent 'http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/topics/get/json/query;tag268=1?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%20%22topics%22%7D%7D%5D%7D' | grep -Po '(?<="id":)[0-9]+'` 
	do
		CONTENT_SPEC=$(curl --silent http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/topic/get/json/${CS_ID})
		TITLE=$(echo ${CONTENT_SPEC} | grep -Po '(?<="title":").*?(?=",)')
		PRODUCT=$(echo ${CONTENT_SPEC} | sed -n "s/^.*Product = \(\\w*\)\\\\n.*$/\1/p")
	
		# Add an entry to the index page
		echo "{ id: '<a href=\"${CS_ID}\">${CS_ID}</a>', product: '<a href=\"${CS_ID}\">${PRODUCT}</a>', title: '<a href=\"${CS_ID}\">${TITLE}</a>', buildlog: '<a href=\"${CS_ID}/build.log\"><button>Build Log</button></a>' , publicanlog: '<a href=\"${CS_ID}/publican.log\"><button>Publican Log</button></a>'}," >> ${INDEX_TMP_FILE}
	
		# Sleep until a core is free for another publican build
		PUBLICAN_COUNT=$(ps -ef | grep -v grep | grep publican | wc -l)
		CSPROCESSOR_COUNT=$(ps -ef | grep -v grep | grep csprocessor.jar | wc -l)
		echo ${PUBLICAN_COUNT} instances of publican running.
		echo ${CSPROCESSOR_COUNT} instances of csprocessor running. 
		
		while [ $((${PUBLICAN_COUNT} + ${CSPROCESSOR_COUNT})) -ge ${CORE_COUNT} ]
		do
			echo Sleeping until publican and csprocessor finish
			sleep 10;
			
			PUBLICAN_COUNT=$(ps -ef | grep -v grep | grep publican | wc -l)
			CSPROCESSOR_COUNT=$(ps -ef | grep -v grep | grep csprocessor | wc -l)
			echo ${PUBLICAN_COUNT} instances of publican running.
			echo ${CSPROCESSOR_COUNT} instances of csprocessor running. 
		done
		
		CS_FILENAME=${DOCBUILDER_DATA_DIR}/${CS_ID}
		RECOMPILE=true
		
		# Create the data directory if it does not exist
		if [ ! -d ${DOCBUILDER_DATA_DIR} ]
		then
			echo Data directory was not present, and was created.
			mkdir -p ${DOCBUILDER_DATA_DIR}
		fi
		
		# Check for the last time we recompiled the content spec
		if [ -f ${CS_FILENAME} ]
		then
			echo Last compile data was found for ${CS_ID}. Checking for changes.
		
			LAST_COMPILE=$(head -n 1 ${CS_FILENAME})
			LAST_COMPILE_ENCODED=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$LAST_COMPILE") 
			LAST_COMPILE_ENCODED=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$LAST_COMPILE_ENCODED") 			
			
			NUMBER_TOPICS=$(curl --silent  "http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/topics/get/json/query;startEditDate=${LAST_COMPILE_ENCODED};topicIncludedInSpec=${CS_ID}?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%20%22topics%22%7D%7D%5D%7D" | grep -Po '(?<="size":)[0-9]+')
						
			SPEC_HAS_CHANGED=$(curl --silent  "http://skynet.usersys.redhat.com:8080/TopicIndex/seam/resource/rest/1/topics/get/json/query;startEditDate=${LAST_COMPILE_ENCODED};topicIds=${CS_ID}?expand=%7B%22branches%22%3A%5B%7B%22trunk%22%3A%7B%22name%22%3A%20%22topics%22%7D%7D%5D%7D" | grep -Po '(?<="size":)[0-9]+')		
			
			#echo ${NUMBER_TOPICS}
			#echo ${SPEC_HAS_CHANGED}
			
			if [[ ${NUMBER_TOPICS} -eq "0" ]] && [[ ${SPEC_HAS_CHANGED} -eq "0" ]]
			then
				RECOMPILE=false
				echo No changes were found for ${CS_ID}.
			else
				date '+%Y-%m-%dT%k:%M:%S.000%z' > ${CS_FILENAME}
			fi
		else
			echo Last compile data was not found for ${CS_ID} and was set to now.
		
			date '+%Y-%m-%dT%k:%M:%S.000%z' > ${CS_FILENAME}
		fi
		
		# A sanity check to make sure that we are not skipping content specs that failed to build for some reason
		if [ ${RECOMPILE} = "false" ]
		then
			if [ ! -f /var/www/html/${CS_ID}/index.html ]
			then
				echo Last build for ${CS_ID} failed because there is no index.html
				RECOMPILE=true
				date '+%Y-%m-%dT%k:%M:%S.000%z' > ${CS_FILENAME}
			fi
		fi
		
		# Build the book
		if [ ${RECOMPILE} = "true" ]
		then
			echo Recompiling ${CS_ID}
		
			#${BOOK_BUILD_SCRIPT} ${CS_ID} ${CS_ID} > /dev/null 2>&1 &
		fi	
		
		#break

	done
	
	# Finish the index page, and copy to the www dir
	echo " ]; var table = new Y.DataTable({ columns: [ {key: \"id\", allowHTML: true}, {key: \"product\", allowHTML: true}, {key: \"title\", allowHTML: true}, {key: \"buildlog\", allowHTML: true}, {key: \"publicanlog\", allowHTML: true} ], sortable: [\"id\", \"product\", \"title\"], data: data }); table.render(\"#table\"); }); </script> </body></html>" >> ${INDEX_TMP_FILE}
	rm -f /var/www/html/index.html.old
	mv /var/www/html/index.html /var/www/html/index.html.old
	cp  ${INDEX_TMP_FILE} /var/www/html
	
	# Give the server a break before starting again
	sleep 60
done
